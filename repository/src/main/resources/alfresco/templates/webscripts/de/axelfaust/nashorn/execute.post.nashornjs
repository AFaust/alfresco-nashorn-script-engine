/* globals -require */
/**
 * This module acts as the standard runner for dynamic Nashorn web script code provided to the JavaScript Console execution backend. Its
 * primary purpose is to wrap executions to additionally preload the expected root scope utilities and hooks to suport the JavaScript
 * Console addon.
 * 
 * @requires module:require
 * @author Axel Faust
 */
define([ 'require', 'legacyRootObjects', 'args!_printOutput' ], function execute__factory(require, legacyRootObjects, printOutput)
{
    'use strict';

    legacyRootObjects.registerRootObject('print', function execute__print(msg)
    {
        if (typeof msg === 'string')
        {
            printOutput.add(msg);
        }
        else if (typeof msg === 'function')
        {
            printOutput.add('Function ' + msg.name);
        }
        else if (Array.isArray(msg))
        {
            msg.forEach(function execute__print_forEach(element, idx)
            {
                var line = String(idx) + ' : ';

                if (typeof element === 'string')
                {
                    line += element;
                }
                else if (typeof element === 'function')
                {
                    line += 'Function ' + element.name;
                }
                else
                {
                    line += String(msg);
                }

                printOutput.add(line);
            });
        }
        else
        {
            printOutput.add(String(msg));
        }

    }, false);
    
    // TODO Preload additional modules

    return function execute()
    {
        var result;

        require([ 'callerProvided!js-console/script' ], function execute__callback(scriptResult)
        {
            result = scriptResult;

            if (typeof result === 'function')
            {
                result = result();
            }
        }, function execute__errCallback(dependencies, resolutions, implicitResolutions)
        {
            result = resolutions[0];

            if (typeof result === 'function')
            {
                result = result();
            }
            else
            {
                result = result || implicitResolutions[0];
            }
        });

        return result;
    };
});
